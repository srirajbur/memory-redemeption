{"version":3,"sources":["characterCards.js","components/Cards.js","components/Navbar.js","App.js","index.js"],"names":["characterCards","name","img","id","nanoid","Card","props","string","character","handleClick","className","onClick","src","window","location","origin","toUpperCase","slice","Cards","characters","map","Navbar","currentScore","bestScore","App","useState","setCharacters","setScore","setBestScore","clickedChars","setClickChars","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","useEffect","e","currentChar","target","find","char","includes","push","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAiBeA,EAfQ,CACrB,CAAEC,KAAM,SAAUC,IAAK,aAAcC,GAAIC,eACzC,CAAEH,KAAM,UAAWC,IAAK,cAAeC,GAAIC,eAC3C,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,eACvC,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,eACvC,CAAEH,KAAM,OAAQC,IAAK,WAAYC,GAAIC,eACrC,CAAEH,KAAM,SAAUC,IAAK,aAAcC,GAAIC,eACzC,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,eACvC,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,eACvC,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,eACvC,CAAEH,KAAM,OAAQC,IAAK,WAAYC,GAAIC,eACrC,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,eACvC,CAAEH,KAAM,QAASC,IAAK,YAAaC,GAAIC,gB,OCAnCC,EAAO,SAACC,GACZ,IAGoBC,EAHZC,EAA2BF,EAA3BE,UAAWC,EAAgBH,EAAhBG,YACXR,EAAkBO,EAAlBP,KAAMC,EAAYM,EAAZN,IAAKC,EAAOK,EAAPL,GAMnB,OACE,sBAAKO,UAAU,OAAOP,GAAIA,EAAIQ,QAASF,EAAvC,UACE,qBAAKC,UAAU,WAAWP,GAAIA,EAA9B,SACE,qBACES,IAAKC,OAAOC,SAASC,OAAhB,oCAAsDb,GAC3DC,GAAIA,MAGR,qBAAKA,GAAIA,EAAT,UAZgBI,EAYSN,EAXpBM,EAAO,GAAGS,cAAgBT,EAAOU,MAAM,UAgBnCC,EAjCD,SAACZ,GACb,IAAQa,EAA4Bb,EAA5Ba,WAAYV,EAAgBH,EAAhBG,YAEpB,OACE,qBAAKC,UAAU,QAAf,SACGS,EAAWC,KAAI,SAACZ,GACf,OAAO,cAAC,EAAD,CAAMA,UAAWA,EAAWC,YAAaA,UCQzCY,EAbA,SAACf,GACd,IAAQgB,EAA4BhB,EAA5BgB,aAAcC,EAAcjB,EAAdiB,UACtB,OACE,gCACE,mDACA,sBAAKb,UAAU,aAAf,UACE,0CAAaY,KACb,+CAAkBC,YC4DXC,MAhEf,WACE,MAAoCC,mBAASzB,GAA7C,mBAAOmB,EAAP,KAAmBO,EAAnB,KACA,EAAiCD,mBAAS,GAA1C,mBAAOH,EAAP,KAAqBK,EAArB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOF,EAAP,KAAkBK,EAAlB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAqBC,EAArB,KAEA,SAASC,EAAQC,GAOf,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAgCT,OA7BAQ,qBAAU,WAEJlB,EAAeC,GACjBK,EAAaN,GAIfI,EAAcK,EAAQZ,OAuBtB,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,CAAQY,aAAcA,EAAcC,UAAWA,IAC/C,cAAC,EAAD,CAAOd,YAdX,SAAqBgC,GACnB,IATmBtC,EASbuC,GATavC,EASasC,EAAEE,OAAOxC,GARlCgB,EAAWyB,MAAK,SAACC,GACtB,GAAIA,EAAK1C,KAAOA,EACd,OAAO0C,MAOPhB,EAAaiB,SAASJ,EAAYzC,OACpC0B,EAAS,GACTG,EAAc,MAEdH,EAASL,EAAe,GACxBO,EAAakB,KAAKL,EAAYzC,QAOGkB,WAAYY,EAAQZ,SC7D3D6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2ef4688d.chunk.js","sourcesContent":["import { nanoid } from 'nanoid';\n\nconst characterCards = [\n  { name: 'arthur', img: 'arthur.png', id: nanoid() },\n  { name: 'charles', img: 'charles.png', id: nanoid() },\n  { name: 'dutch', img: 'dutch.png', id: nanoid() },\n  { name: 'hosea', img: 'hosea.png', id: nanoid() },\n  { name: 'john', img: 'john.png', id: nanoid() },\n  { name: 'josiah', img: 'josiah.png', id: nanoid() },\n  { name: 'lenny', img: 'lenny.png', id: nanoid() },\n  { name: 'micah', img: 'micah.png', id: nanoid() },\n  { name: 'sadie', img: 'sadie.png', id: nanoid() },\n  { name: 'sean', img: 'sean.png', id: nanoid() },\n  { name: 'tilly', img: 'tilly.png', id: nanoid() },\n  { name: 'uncle', img: 'uncle.png', id: nanoid() },\n];\n\nexport default characterCards;\n","import '../App.css';\n\nconst Cards = (props) => {\n  const { characters, handleClick } = props;\n\n  return (\n    <div className=\"Cards\">\n      {characters.map((character) => {\n        return <Card character={character} handleClick={handleClick} />;\n      })}\n    </div>\n  );\n};\n\nconst Card = (props) => {\n  const { character, handleClick } = props;\n  const { name, img, id } = character;\n\n  function capitalize(string) {\n    return string[0].toUpperCase() + string.slice(1);\n  }\n\n  return (\n    <div className=\"card\" id={id} onClick={handleClick}>\n      <div className=\"card-img\" id={id}>\n        <img\n          src={window.location.origin + `/memory-redemption/assets/${img}`}\n          id={id}\n        />\n      </div>\n      <div id={id}>{capitalize(name)}</div>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from 'react';\nimport '../App.css';\n\nconst Navbar = (props) => {\n  const { currentScore, bestScore } = props;\n  return (\n    <nav>\n      <h2>Memory Redemption</h2>\n      <div className=\"scoreboard\">\n        <div>Score: {currentScore}</div>\n        <div>Best Score: {bestScore}</div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport characterCards from './characterCards';\nimport Cards from './components/Cards';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  const [characters, setCharacters] = useState(characterCards);\n  const [currentScore, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [clickedChars, setClickChars] = useState([]);\n\n  function shuffle(array) {\n    //code from Stack Overflow\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  useEffect(() => {\n    //best score\n    if (currentScore > bestScore) {\n      setBestScore(currentScore);\n    }\n\n    //shuffle characters\n    setCharacters(shuffle(characters));\n  });\n\n  function findCharObj(id) {\n    return characters.find((char) => {\n      if (char.id === id) {\n        return char;\n      }\n    });\n  }\n\n  function handleClick(e) {\n    const currentChar = findCharObj(e.target.id);\n    if (clickedChars.includes(currentChar.name)) {\n      setScore(0);\n      setClickChars([]);\n    } else {\n      setScore(currentScore + 1);\n      clickedChars.push(currentChar.name);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar currentScore={currentScore} bestScore={bestScore} />\n      <Cards handleClick={handleClick} characters={shuffle(characters)} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}